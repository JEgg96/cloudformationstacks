AWSTemplateFormatVersion: "2010-09-09"

Description: This is a banking app duh!! It uses S3, API Gateway, and Lambda

Resources:
  bankings3JE:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: dabucket123129

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: IAM Role For Lambda
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      RoleName: LambdaExecutionRole

  bankingRESTAPI: 
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: balancestatusAPI

  bankingstatusResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId: !GetAtt bankingRESTAPI.RootResourceId
      PathPart: balanceStatus01
      RestApiId: !Ref bankingRESTAPI

  LambdaFunction:
    DependsOn: LambdaExecutionRole
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt LambdaExecutionRole.Arn
      Handler: index.lambda_handler
      Code: 
        ZipFile: |
          import json
          import boto3
          client = boto3.client('s3')

          def lambda_handler(event, context):
              response = client.get_object(
                  Bucket='dabucket123129',
                  Key='accountBalance.json',
              )
              # convert from streaming data to byte
              data_byte = response['Body'].read()
              # convert from bytes to strings
              data_string = data_byte.decode("UTF-8")
              # convert from json string to dictionary
              data_dict = json.loads(data_string)

              return {
                  'statusCode': 200,
                  'body': json.dumps(data_dict),
                  'headers': {'Content-Type': 'application/json'},
              }
      Description: API Gateway Lambda S3
      Timeout: 60

  bankingstatusMethod:
    Type: 'AWS::ApiGateway::Method'
    Properties:
      RestApiId: !Ref bankingRESTAPI
      ResourceId: !Ref bankingstatusResource
      HttpMethod: GET
      MethodResponses:
        - StatusCode: 200
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaFunction.Arn}/invocations'

  APIDeployment:
    DependsOn: bankingstatusMethod
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref bankingRESTAPI
      Description: My deployment to production
      StageName: Production
